---
layout: post
title: '신규아이디추천(정규표현식)'
subtitle: '신규아이디추천(정규표현식)'
categories: codingTest
tags: level1
comments: true
---


# 정규표현식 
## 프로그래머스(2021 KAKAO BLIND RECRUITMENT) : 신규아이디추천

조건
```
1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
     만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
```
## 제출한 답안
```java
class Solution {
    public String solution(String new_id) {
        String answer = new_id;
        //1단계 
        answer = answer.toLowerCase();                          
        //2단계
        answer = answer.replaceAll("[^a-z0-9[-][_][.]]","");    
        //3단계
        answer = answer.replaceAll("[.]{2,}",".");      //{2,} 2회이상
        //4단계
        answer = answer.replaceAll("^[.]|[.]$","");
        //5단계
        if(answer.trim() == "" || answer.length() == 0) answer = "a";
        //6단계
        if(answer.length() > 15) answer = answer.substring(0,15);
        answer = answer.replaceAll("[.]$","");
        //7단계
        while(answer.length() < 3 )  answer += answer.substring(answer.length() - 1 );

        return answer;
    }
}
```

특수문자는 [] 안에 쓰면 문자로 인식
[] 안에 ^ 있으면 not
[] 밖에 ^ 있으면 ~로시작하는


# 채점시 통과 됐지만 5단계에서 == 비교가 잘못됨 
처음에 통과 안되길래 ""인 문자열은 trim 적용 안되나 싶어서 길이 0인 조건 추가해서 통과 됐는데
생각해보니 
```
==은 주소값 비교
```
이고
```
equals()가 대상의 내용 자체를 비교
```
임

## 보완해야할 부분
```java
    //5단계  
    if(answer.trim().equals("")) answer = "a";
```