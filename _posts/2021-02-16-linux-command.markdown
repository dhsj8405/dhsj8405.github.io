---

layout: post
title: 'Linux 명령어 정리(Linux Command) 및 관리'
subtitle: 'Linux 명령어 정리(Linux Command) 및 관리'
categories: devlog
tags: linux
comments: true

---

# 리눅스 명령어 정리 및 관리
 
## 명령어 (command)

useradd : 
리눅스에서 계정을 추가할 때 사용한다.
- 사용법  
```useradd [옵션] 계정이름```

	옵션  
	-d : 홈 디렉터리를 지정할 때 사용한다.  
	-g : 그룹을 지정할 때 사용한다.  
	-G : 기본 그룹 이외에 추가로 지정할 그룹이 있는 경우 사용한다.  
	-c :  계정 추가 시 계정에 대한 설명을 설정한다.  
	-s : 계정 추가 시, 이 계정으로 로그인 한 사용자가 사용할 쉘을 지정한다.  
	-D : /etc/default/useradd 파일에 설정되어 있는 useradd 명령의 기본 설정 내용을 보여준다.

passwd :
사용자의 비밀번호 설정 및 수정할 때 사용한다.
- 사용법  
```passwd 계정```  

	비밀번호는 /etc/shadow 파일에 암호화  되어 있다.

userdel :
사용자를 삭제한다.

- 사용법  
userdel [옵션] 계정

	옵션  
	-r : 사용자의 홈 디렉터리를 제거한다.

groupadd :
새로운 그룹을 생성한다.
- 사용법  
```groupadd [옵션] 그룹명```

	옵션  
	-g GID: 특정 GID번호로 설정한다.  
	-r : 0~1000 번대 사이로 GID를 자동으로 설정한다.

groupdel :
그룹을 삭제하는 명령어이다. 만약, 삭제하려는 그룹에 속한 계정이 있다면 삭제되지 않는다.

- 사용법  
```groupdel 그룹명```

groups : 
사용자가 속한 그룹을 보여준다.

- 사용법  
```groups 사용자명```

su : 
다른 사용자 권한으로 쉘을 실행한다. 로그아웃 없이 다른 사용자로 전환할 수 있다.

- 사용법  
```su [옵션] 계정```

	옵션  
	\- : 사용자의 환경변수를 읽는다.

ls :
디렉터리에 있는 파일의 목록을 표시해 준다.

- 사용법  
```ls [옵션] [디렉터리]```

	옵션  
	-l  : 파일에 대해서 권한이나 생성 시간처럼 보다 자세한 내용을 출력한다. (long)  
	-a : 숨긴 파일이나 디렉터리 등의 현재 디렉터리의 모든 내용을 출력한다. (all)  
	-h : 파일 크기를 k, m, g 와 같이 사람이 읽기 편한 단위로 출력한다. (human readable)  
	-F : 실행 파일이나 디렉터리 등이 쉽게 구분 될 수 있도록 출력한다.  
	-R : 하위 디렉터리의 내용들도 함께 출력한다.    
	-al : 숨겨진 파일들을 포함해서 모든 파일의 자세한 정보를 나열 

mkdir :
디렉터리를 생성한다.

- 사용법  
```mkdir [옵션] 디렉터리```

	옵션  
	-m : 디렉터리의 권한을 지정할 수 있다. 기본값은 755이다.  
	-p :  상위 디렉터리가 존재하지 않으면 상위 디렉터리도 만든다.

rmdir : 
비어 있는 디렉터리를 삭제한다.

- 사용방법  
```rmdir [옵션] 디렉터리```

	옵션
	-p :  상위 디렉터리도 지운다. 상위 디렉터리도 비어 있어야 한다.

pwd :
현재 위치한 디렉터리의 절대경로를 출력한다.


cd :
디렉터리를 이동할 때에 사용한다.

- 사용방법  
```cd [디렉터리]```

	디렉터리 명이 생략되면 접속 계정의 홈 디렉토리도 이동한다. ( $ cd ~  )
	디렉토리 경로는 상대경로와 절대경로로 나타낼 수 있다.  
	
	\- 절대경로 : /(루트 디렉터리) 부터 모든 경로를 표시 하는 방법  
	
	\- 상대경로 : 현재 디렉터리 기반으로 특정 디렉터리의 경로를 표시하는 방법이다.  
	유닉스에서는 상대경로를 표시 할 수 있도록  . (현재 디렉터리) 와  .. (부모 디렉터리)의 심볼을 제공한다.

touch :
파일의 시간정보를 변경하는 명령어이다.
크기가 0인 파일을 생성하는 용도로 자주 사용된다.

- 사용법  
```touch [옵션] 파일이름```

	옵션  
	-c : 현재 시간으로 파일 시간을 변경한다. (파일이 존재하지 않으면 생성하지 않는다.)  
	-d 시간 :  현재 시간 대신 지정한 시간으로 파일 시간을 변경한다. ($ touch ‘2016-02-05 12:00:30’ test)  
	-r  파일 :  현재 시간 대신 지정한 파일 시간으로 파일 시간을 변경한다.  
	-t MMDDHHMM[[CC]YY][.SS]: 현재 시간대신 지정한 시간으로 변경한다.

cp :
파일을 복사하는 명령어이다.

- 사용법  
```cp [옵션] 원본 사본```

	옵션  
	-a : 원본 파일의 속성, 링크 정보들을 그대로 유지하면서 복사한다.  
	-i : 만약 복사 대상에 같은 이름의 파일이 존재하면 사용자에게 물어 본다.  
	-f : 만약 복사 대상에 같은 이름의 파일이 존재하면 강제로 지우고 복사한다.  
	-R : 디렉토리를 복사할 경우 그 안에 포함된 모든 하위 디렉터리와 파일들을 모두 복사한다.

mv :
cp 명령어는  파일을 복사 하지만 mv 명령어는 파일을 이동하는 명령어이다.
unix에는 rename 명령어가 따로 없다. 즉, 파일 이름을 바꿀 때도 사용할 수 있는 명령어이다.

- 사용법  
```mv [옵션] 원본 목적지```

	옵션  
	-b : 덮어 쓰게 되는 경우 백업 파일을 만들고 파일을 만든다.  
	-i : 덮어 쓸 때 사용자에게 물어 본다.  
	-f : 덮어 쓸 때 물어 보지 않는다.

rm :
파일을 삭제 하는 명령이다.
특히, 파일을 삭제하면 복구가 불가능하기 때문에 파일 삭제에는 항상 주의가 필요하다.

- 사용법  
```rm [옵션] 파일이름```

	옵션  
	-r, -R : 일반 파일이 아닌 디렉터리인 경우에는 그 하위 디렉터리와 파일 까지 모두 삭제 한다.   
	-i : 파일을 삭제 할 것인지 사용자에게 물어본다.  
	-f : -i 옵션을 무시 하고 강제로 삭제한다.

cat : 
파일의 내용을 화면에 출력한다.

- 사용법  
```cat [옵션] 파일이름```

	옵션  
	-n : 줄 번호를 표시한다.  
	-b : 빈 행은 제외하고 줄 번호를 표시한다.  
	-E : 각 행마다 끝에 $ 문자를 출력한다.  

more : 
화면 단위로 분할해서 파일 내용을 출력 한다.

- 사용법  
```more [옵션] 파일이름```

	옵션  
	-d : 스페이스나 q키를 누르라는 안내 메시지를 화면에 나타낸다.  
	-s : 연속되는 빈 공백 행을 하나의 행으로 출력한다.  

find : 
다양한 조건으로 특정 파일을 찾는다.

- 사용법
```find [시작 디렉터리] [조건]```

	[시작 디렉터리]부터 시작해서 하위 디렉터리의 모든 파일을 [조건]에 맞는 파일을 검색한다.
	[시작 디렉터리]를 / 로 지정하면 시스템 내의 모든 파일을 검색하게 된다.
	[조건]은 다양하게 줄 수 있다.

	1. –name “문자열”  
	파일 이름이 문자열과 일치하는 파일을 찾는다. 문자열에는 다음과 같은 형식으로 지정할 수 있다.  
	“log” : 파일이름이 log인 파일을 찾는다.  
	“*log” : 파일 이름이 log로 끝나는 모든 파일을 찾는다.  
	“log*” : 파일 이름이 log로 시작하는 모든 파일을 찾는다.  
	“*log*” : 파일 이름 중간에 log가 들어가 있는 파일을 찾는다.  
	“?log” : 파일 이름에서 첫 글자는 어떤 문자라도 상관없고 log로 끝나는 4개 문자 이름의 파일  
	“log??” : 파일 이름 시작이 log로 시작하고 끝의 두 문자가 어떤 것이어도 상관없는 5개 문자 이름의 파일

	2. –user “유저이름”  
	특정 유저가 소유한 파일들을 모두 찾는다.

	3. –perm “퍼미션”  
	명시된 퍼미션으로 된 파일을 찾을 때 사용한다.

	4. –type ?  
	? 형태의 파일을 찾는다.

	5. 그밖에 -size 파일크기, -atime 날짜, -newer 파일등 이있음

grep :
파일 내에서 또는 입력 값으로부터 특정 패턴을 검색한다.

- 사용법
```grep [옵션] 표현  [파일(들)]```

	옵션  
	-v : 일치되는 내용이 없는 라인을 표시한다.  
	-c : 일치되는 내용이 있는 행의 개수를 표시한다.  
	-n : 일치되는 내용이 있는 행은 행 번호와 함께 표시된다.

	파이프(pipe) :
	프로그램의 실행결과를 다른 프로그램의 입력으로 연결한다. 둘 이상의 명령을 함께 사용하고, 한 명령어의 출력결과를 다른 명령어의 입력으로 전환하는 것을 파이프(pipe)라 한다.  
	- ```|```

리다이렉션(redirection) :
리다이렉션을 이용하면 명령의 출력을 변경할 수 있다. 명령어의 결과는 기본적으로 터미널(stdout) 이다. 리다이렉션을 이용하면 파일에 기록할 수 있다.

	연산자
	명령어 > 파일 : 파일이 없으면 생성하고, 있다면 기존의 내용을 지운다.  
	명령어 >> 파일 : 파일이 없다면 생성하고, 있다면 기존의 내용에 추가한다.  
	명령어 < 파일 : 파일에서 표준 입력(stdin)을 받는다.

chown : 
파일 소유자나 소유그룹을 변경하기 위한 명령어이다.

- 사용법  
```chmod [옵션] 소유자:소유그룹 파일명```

	옵션  
	-R : 경로와 그 하위 파일들을 모두 변경한다.  
	--help : 도움말을 출력한다.  
	--version : 버전 정보를 보여준다.  

tar : 
기본적으로 압축을 하지 않고 묶어 주는 역할(아카이브, archive)을 한다.

- 사용법  
묶을 때 :  ```tar [옵션] 생성파일.tar 묶을 파일```  
해제할 때 : ```tar [옵션] 파일.tar```

	옵션  
	-c : 새 저장 파일을 만든다. 즉 묶을 때 사용하는 옵션이다.  
	-x : 묶인 파일을 해제 한다.  
	-v : 처리 중인 파일을 자세하게 보여준다.  
	-f : 파일을 지정한다.  
	-z : 각 각 gzip 를 사용해서 묶인 파일에 대해 압축을 하거나 압축을 해제 할 수 있다.
	-j : bzip2 압축 또는 해제


	보통 tar를 사용해서 파일을 묶을 때는 –cvf 옵션을 사용

	tar 파일을 풀때에는 보통 –xvf 옵션을 사용

	tar는 압축을 하지 않고 묶기 때문에 tar 파일은 압축을 하게 된다. gzip으로 압축  
	```gzip kickscar.tar```

	gz 파일을 압축 해제는 ```gzip –d``` 또는 ```gunzip``` 명령어를 사용

	<span style = "color:red">-xvzf : 압축과 함께 묶인 것 풀기</span>


## 관리
/etc/passwd 파일 : 현재 시스템의 사용자를 확인 
- passwd 파일 정보 형식  
```ID:비밀번호:UID:GID:설명:홈디렉터리:로그인 쉘```  
비밀번호는 보안상 x로 표시(/etc/shadow 파일에 암호화 되어 관리)


파일의 구분  
<pre>
-           : 일반(보통) 파일  
b           : 블록 디바이스 파일  
c           : 문자열 디바이스 파일  
d           : 디렉토리  
l            : 심볼릭 링크    
p 또는 = : 명명된 파이프(named pipe) / FIFO  
s           : 소켓(socket) 
</pre>

파일 권한  
<pre>
r : 읽기권한, w : 쓰기 권한, x : 실행 권한  
-rwxrwxrwx  
: -(파일타입) rwx(user권한) rwx(group 권한) rwx(other 권한)
</pre>

