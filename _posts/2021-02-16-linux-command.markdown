---

layout: post
title: 'Linux 명령어 정리(Linux Command) 및 관리'
subtitle: 'Linux 명령어 정리(Linux Command) 및 관리'
categories: devlog
tags: server
comments: true

---

# 리눅스 명령어 정리 및 관리
 
## 명령어 (command)

### 기본명령어 

useradd : 
리눅스에서 계정을 추가할 때 사용한다.
- 사용법  
```useradd [옵션] 계정이름```

	옵션  
	-d : 홈 디렉터리를 지정할 때 사용한다.  
	-g : 그룹을 지정할 때 사용한다.  
	-G : 기본 그룹 이외에 추가로 지정할 그룹이 있는 경우 사용한다.  
	-c :  계정 추가 시 계정에 대한 설명을 설정한다.  
	-s : 계정 추가 시, 이 계정으로 로그인 한 사용자가 사용할 쉘을 지정한다.  
	-D : /etc/default/useradd 파일에 설정되어 있는 useradd 명령의 기본 설정 내용을 보여준다.

passwd :
사용자의 비밀번호 설정 및 수정할 때 사용한다.
- 사용법  
```passwd 계정```  

	비밀번호는 /etc/shadow 파일에 암호화  되어 있다.

userdel :
사용자를 삭제한다.

- 사용법  
userdel [옵션] 계정

	옵션  
	-r : 사용자의 홈 디렉터리를 제거한다.

groupadd :
새로운 그룹을 생성한다.
- 사용법  
```groupadd [옵션] 그룹명```

	옵션  
	-g GID: 특정 GID번호로 설정한다.  
	-r : 0~1000 번대 사이로 GID를 자동으로 설정한다.

groupdel :
그룹을 삭제하는 명령어이다. 만약, 삭제하려는 그룹에 속한 계정이 있다면 삭제되지 않는다.

- 사용법  
```groupdel 그룹명```

groups : 
사용자가 속한 그룹을 보여준다.

- 사용법  
```groups 사용자명```

su : 
다른 사용자 권한으로 쉘을 실행한다. 로그아웃 없이 다른 사용자로 전환할 수 있다.

- 사용법  
```su [옵션] 계정```

	옵션  
	\- : 사용자의 환경변수를 읽는다.

ls :
디렉터리에 있는 파일의 목록을 표시해 준다.

- 사용법  
```ls [옵션] [디렉터리]```

	옵션  
	-l  : 파일에 대해서 권한이나 생성 시간처럼 보다 자세한 내용을 출력한다. (long)  
	-a : 숨긴 파일이나 디렉터리 등의 현재 디렉터리의 모든 내용을 출력한다. (all)  
	-h : 파일 크기를 k, m, g 와 같이 사람이 읽기 편한 단위로 출력한다. (human readable)  
	-F : 실행 파일이나 디렉터리 등이 쉽게 구분 될 수 있도록 출력한다.  
	-R : 하위 디렉터리의 내용들도 함께 출력한다.    
	-al : 숨겨진 파일들을 포함해서 모든 파일의 자세한 정보를 나열 

mkdir :
디렉터리를 생성한다.

- 사용법  
```mkdir [옵션] 디렉터리```

	옵션  
	-m : 디렉터리의 권한을 지정할 수 있다. 기본값은 755이다.  
	-p :  상위 디렉터리가 존재하지 않으면 상위 디렉터리도 만든다.

rmdir : 
비어 있는 디렉터리를 삭제한다.

- 사용방법  
```rmdir [옵션] 디렉터리```

	옵션
	-p :  상위 디렉터리도 지운다. 상위 디렉터리도 비어 있어야 한다.

pwd :
현재 위치한 디렉터리의 절대경로를 출력한다.


cd :
디렉터리를 이동할 때에 사용한다.

- 사용방법  
```cd [디렉터리]```

	디렉터리 명이 생략되면 접속 계정의 홈 디렉토리도 이동한다. ( $ cd ~  )
	디렉토리 경로는 상대경로와 절대경로로 나타낼 수 있다.  
	
	\- 절대경로 : /(루트 디렉터리) 부터 모든 경로를 표시 하는 방법  
	
	\- 상대경로 : 현재 디렉터리 기반으로 특정 디렉터리의 경로를 표시하는 방법이다.  
	유닉스에서는 상대경로를 표시 할 수 있도록  . (현재 디렉터리) 와  .. (부모 디렉터리)의 심볼을 제공한다.

touch :
파일의 시간정보를 변경하는 명령어이다.
크기가 0인 파일을 생성하는 용도로 자주 사용된다.

- 사용법  
```touch [옵션] 파일이름```

	옵션  
	-c : 현재 시간으로 파일 시간을 변경한다. (파일이 존재하지 않으면 생성하지 않는다.)  
	-d 시간 :  현재 시간 대신 지정한 시간으로 파일 시간을 변경한다. ($ touch ‘2016-02-05 12:00:30’ test)  
	-r  파일 :  현재 시간 대신 지정한 파일 시간으로 파일 시간을 변경한다.  
	-t MMDDHHMM[[CC]YY][.SS]: 현재 시간대신 지정한 시간으로 변경한다.

cp :
파일을 복사하는 명령어이다.

- 사용법  
```cp [옵션] 원본 사본```

	옵션  
	-a : 원본 파일의 속성, 링크 정보들을 그대로 유지하면서 복사한다.  
	-i : 만약 복사 대상에 같은 이름의 파일이 존재하면 사용자에게 물어 본다.  
	-f : 만약 복사 대상에 같은 이름의 파일이 존재하면 강제로 지우고 복사한다.  
	-R : 디렉토리를 복사할 경우 그 안에 포함된 모든 하위 디렉터리와 파일들을 모두 복사한다.

mv :
cp 명령어는  파일을 복사 하지만 mv 명령어는 파일을 이동하는 명령어이다.
unix에는 rename 명령어가 따로 없다. 즉, 파일 이름을 바꿀 때도 사용할 수 있는 명령어이다.

- 사용법  
```mv [옵션] 원본 목적지```

	옵션  
	-b : 덮어 쓰게 되는 경우 백업 파일을 만들고 파일을 만든다.  
	-i : 덮어 쓸 때 사용자에게 물어 본다.  
	-f : 덮어 쓸 때 물어 보지 않는다.

rm :
파일을 삭제 하는 명령이다.
특히, 파일을 삭제하면 복구가 불가능하기 때문에 파일 삭제에는 항상 주의가 필요하다.

- 사용법  
```rm [옵션] 파일이름```

	옵션  
	-r, -R : 일반 파일이 아닌 디렉터리인 경우에는 그 하위 디렉터리와 파일 까지 모두 삭제 한다.   
	-i : 파일을 삭제 할 것인지 사용자에게 물어본다.  
	-f : -i 옵션을 무시 하고 강제로 삭제한다.
	-rf : 디렉터리, -i 옵션 무시하고 강제삭제

cat : 
파일의 내용을 화면에 출력한다.

- 사용법  
```cat [옵션] 파일이름```

	옵션  
	-n : 줄 번호를 표시한다.  
	-b : 빈 행은 제외하고 줄 번호를 표시한다.  
	-E : 각 행마다 끝에 $ 문자를 출력한다.  

more : 
화면 단위로 분할해서 파일 내용을 출력 한다.

- 사용법  
```more [옵션] 파일이름```

	옵션  
	-d : 스페이스나 q키를 누르라는 안내 메시지를 화면에 나타낸다.  
	-s : 연속되는 빈 공백 행을 하나의 행으로 출력한다.  

find : 
다양한 조건으로 특정 파일을 찾는다.

- 사용법
```find [시작 디렉터리] [조건]```

	[시작 디렉터리]부터 시작해서 하위 디렉터리의 모든 파일을 [조건]에 맞는 파일을 검색한다.
	[시작 디렉터리]를 / 로 지정하면 시스템 내의 모든 파일을 검색하게 된다.
	[조건]은 다양하게 줄 수 있다.

	1. –name “문자열”  
	파일 이름이 문자열과 일치하는 파일을 찾는다. 문자열에는 다음과 같은 형식으로 지정할 수 있다.  
	“log” : 파일이름이 log인 파일을 찾는다.  
	“*log” : 파일 이름이 log로 끝나는 모든 파일을 찾는다.  
	“log*” : 파일 이름이 log로 시작하는 모든 파일을 찾는다.  
	“*log*” : 파일 이름 중간에 log가 들어가 있는 파일을 찾는다.  
	“?log” : 파일 이름에서 첫 글자는 어떤 문자라도 상관없고 log로 끝나는 4개 문자 이름의 파일  
	“log??” : 파일 이름 시작이 log로 시작하고 끝의 두 문자가 어떤 것이어도 상관없는 5개 문자 이름의 파일

	2. –user “유저이름”  
	특정 유저가 소유한 파일들을 모두 찾는다.

	3. –perm “퍼미션”  
	명시된 퍼미션으로 된 파일을 찾을 때 사용한다.

	4. –type ?  
	? 형태의 파일을 찾는다.

	5. 그밖에 -size 파일크기, -atime 날짜, -newer 파일등 이있음

grep :
파일 내에서 또는 입력 값으로부터 특정 패턴을 검색한다.

- 사용법
```grep [옵션] 표현  [파일(들)]```

	옵션  
	-v : 일치되는 내용이 없는 라인을 표시한다.  
	-c : 일치되는 내용이 있는 행의 개수를 표시한다.  
	-n : 일치되는 내용이 있는 행은 행 번호와 함께 표시된다.

	파이프(pipe) :
	프로그램의 실행결과를 다른 프로그램의 입력으로 연결한다. 둘 이상의 명령을 함께 사용하고, 한 명령어의 출력결과를 다른 명령어의 입력으로 전환하는 것을 파이프(pipe)라 한다.  
	- ```|```

리다이렉션(redirection) :
리다이렉션을 이용하면 명령의 출력을 변경할 수 있다. 명령어의 결과는 기본적으로 터미널(stdout) 이다. 리다이렉션을 이용하면 파일에 기록할 수 있다.

	연산자
	명령어 > 파일 : 파일이 없으면 생성하고, 있다면 기존의 내용을 지운다.  
	명령어 >> 파일 : 파일이 없다면 생성하고, 있다면 기존의 내용에 추가한다.  
	명령어 < 파일 : 파일에서 표준 입력(stdin)을 받는다.

chown : 
파일 소유자나 소유그룹을 변경하기 위한 명령어이다.

- 사용법  
```chmod [옵션] 소유자:소유그룹 파일명```

	옵션  
	-R : 경로와 그 하위 파일들을 모두 변경한다.  
	--help : 도움말을 출력한다.  
	--version : 버전 정보를 보여준다.  

tar : 
기본적으로 압축을 하지 않고 묶어 주는 역할(아카이브, archive)을 한다.

- 사용법  
묶을 때 :  ```tar [옵션] 생성파일.tar 묶을 파일```  
해제할 때 : ```tar [옵션] 파일.tar```

	옵션  
	-c : 새 저장 파일을 만든다. 즉 묶을 때 사용하는 옵션이다.  
	-x : 묶인 파일을 해제 한다.  
	-v : 처리 중인 파일을 자세하게 보여준다.  
	-f : 파일을 지정한다.  
	-z : 각 각 gzip 를 사용해서 묶인 파일에 대해 압축을 하거나 압축을 해제 할 수 있다.  
	-j : bzip2 압축 또는 해제  
	<span style = "color:red">-xvzf : 압축과 함께 묶인 것 풀기</span>

	보통 tar를 사용해서 파일을 묶을 때는 –cvf 옵션을 사용

	tar 파일을 풀때에는 보통 –xvf 옵션을 사용

	tar는 압축을 하지 않고 묶기 때문에 tar 파일은 압축을 하게 된다. gzip으로 압축  
	```gzip kickscar.tar```

	gz 파일을 압축 해제는 ```gzip –d``` 또는 ```gunzip``` 명령어를 사용

### 네트워크 관리 명령어  

ping : 
ping 명령을 이용하면 다름 시스템의 네트워크가 현재 동작 중인지 알 수가 있다.

- 사용법  
	```ping [옵션] 호스트```

	옵션  
	-s : 패킷 사이즈를 지정한다.  
	-q : 종합 결과만 보여준다.  
	-i  : 지연시간을 설정한다.  
	-c : 보낼 패킷 수를 지정해 준다.  

	옵션 없이 사용하면 계속 패킷 보냄  
	Ctrl + C 로 중지

	<span style = "color:red">ping 명령어는 상대 호스트 또는 자신이 정상적으로 네트워크 작동을 하는 지 확인하는 데 아주 유용하게 쓰인다.</span>  
	하지만 과도하게 사용하면 서버에 부담을 줄 수 있다.

	ping 응답을 막는 설정  
	```#vi /etc/sysctl.conf```
	```
	# For more information, see sysctl.conf(5) and sysctl.d(5).

	net.ipv4.icmp_echo_ignore_all=1

	```
	확인  
	![image](https://user-images.githubusercontent.com/60701130/154268007-0c598484-1db4-47e1-b1d0-bc3c93faeb01.png)


nslookup : 
nslookup은 도메인 네임서버에 질의를 할 수 있는 명령어 이다. 도메인 이름의 호스트의 IP주소를 검색할 수 있고 네임서버가 올바르게 작동하는 지 확인 할 수도 있다.

- 사용법  
	```nslookup [도메인]```

	도메인을 입력하지 않으면 대화형으로 프로그램이 작동한다.

hostname : 
호스트네임을 화면에 출력하고, 호스트네임을 변경할 수 있다.

- 사용법  
```hostname```  

	결과
	![image](https://user-images.githubusercontent.com/60701130/154268606-4646e1fb-a3e8-4711-8298-1175304068e8.png)


	호스트 명 변경  
	```vi /etc/hostname ```
	```
	lx.kickscar.com
	```

	결과(반영하기 위해서 재부팅)  
	![image](https://user-images.githubusercontent.com/60701130/154268683-2dfaac0d-d512-429b-a44d-1b682fec9273.png)
	
	centos ssh서버 아예 껐다 켜야함


netstat : 
네트워크 연결, 라우팅 테이블, 네트워크 장치의 통계정보 등 네트워크에 관련된 여러가지 정보를 확인할 수 있다.

- 사용법  
	netstat [옵션]

	옵션  
	-a : 연결된 모든 소켓을 출력한다.  
	-n : 호스트, 포트등의 정보를 이름대신 숫자로 표시한다.  
	-p : 소켓을 열고 있는 프로세스의 아이디(PID) 를 출력한다.  
	-r  : 라우팅 테이블을 출력한다.  
	-t  : TCP 연결에 대한 소켓을 출력한다.  
	-u : UDP 연결에 대한 소켓을 출력한다.  

ifconfig : 
네트워크 인터페이스를 설정하고, 현재 네트워크 인터페이스의 정보를 알아보는 명령어이다.
대부분 네트워크 서정을 확인하는 명령어로 많이 사용된다.

- 사용법  
```ifconfig [옵션]```

### 프로세스 관리 명령어

PS : 
현재 실행되고 있는 프로세스의 목록을 보여준다

- 사용법  
	```ps [옵션]```

	옵션  
	-ㅣ : 자세한 형태의 정보를 출력한다.  
	-a : 다른 사용자들의 프로세스도 보여준다.  
	-u : 프로세스의 사용자 이름과 시작 시가능 출력한다.  
	-x : 터미널과 연결되지 않은 프로세스도 보여준다.  
	-e : 환경을 보여준다.   
	-f  : 프로세스의 정보를 한 둘로 자세히 출력한다.  
	-r : 현재 실행중인 프로세스들을 표시한다.  
	-j : 작업 중심의 형태로 출력한다.  
	-c : 커널 task_struct 구조체 형태로 보여준다.  

	보통 –aux  또는 –ef 옵션을 사용해서 프로세스 상태를 확인한다. 
	```
	[-ef옵션 사용시 프로세스 상태]
	USER: 프로세스 소유자의 계정    
	PID: 프로세스를 구분하는 프로세스 아이디     
	PPID:  부모 프로세스 PID  
	STIME: 프로세스 시작 시간     
	TTY: 프로세스의 표준 입출력을 담당하는 터미널    
	TIME: 프로세스의 CPU 점유시간  
	CMD: 실행 명령어    
	```
	```
	[-aux 옵션 사용시 프로세스 상태]
	USER: 프로세스 소유자의 계정   
	PID: 프로세스를 구분하는 프로세스 아이디  
	%CPU:마지막 분 동안 사용한 CPU의 %   
	%MEM: 마지막 분 동안 사용한 메모리 양의 %   
	VSZ: 프로세스 데이터 스택의 크기  
	RSS: 실제 메모리 양
	COMMAND: 실행 명령어  
	STAT: 프로세스의 상태  
	START: 프로세스가 시작된 시간     
	stat:
		p: 수행가능, 
		T: 일시 정지,  
		D: 디스크 입출력 대기,  
		S: 20초 미만의 짧은 휴식,  
		ㅣ: 20초 이상의 긴 휴식,  
		Z: 좀비 상태
	```

pstree : 
프로세스 정보를 트리형태로 보여준다.

- 사용법  
	```pstree [옵션]```

	옵션  
	-n : PID 순으로 정렬
	-p : 프로세스 명 + PID

top : 
프로세스의 CPU, Memory 사용량등 전반적인 상황을 실시간으로 모니터링 한다.

- 사용법  
	```top [옵션]```

	옵션  
	-d 시간: 화면 갱신 시간 지정   
	-c : 명령행 전체를 보여준다  
	-q : 화면을 계속 갱신한다.  

![image](https://user-images.githubusercontent.com/60701130/154284640-a1ff95e3-ff1c-4a7a-91c5-dc6e8b0f961b.png)

![image](https://user-images.githubusercontent.com/60701130/154284689-f0ca1293-a9e6-4bdd-b778-e33cb0eda0c8.png)

![image](https://user-images.githubusercontent.com/60701130/154284745-4c50d189-df8f-4509-b0be-b61737c056ba.png)

	top 명령에서 주요 단축 키
	M: 메모리 사용량 순으로 정렬
	P: CPU 사용량 순으로 정렬
	T:  실행시간이 긴 순서로 정렬
	R: 정렬의 순서 변경

kill : 
지정한 프로세스에게 시그널을 보낸다.

- 사용법
	```top [옵션] PID```

	옵션  
	-l : 시그널 목록을 보여준다.  
	-c : 명령행 전체를 보여준다.  
	-q : 화면을 계속 갱신한다.  

![image](https://user-images.githubusercontent.com/60701130/154285197-8b0093cc-31b3-4b89-8234-ed859680b2a2.png)


free : 
시스템의 메모리 정보를 출력한다.

- 사용법
	```free [옵션]```

	옵션  
	-b : 바이트 단위 표시    
	-k : Kb 단위로 표시  
	-m : Mb 단위로 표시  
	-t  : 총합을 표시  


## 관리

### 파일 관리
/etc/passwd 파일 : 현재 시스템의 사용자를 확인 
- passwd 파일 정보 형식  
```ID:비밀번호:UID:GID:설명:홈디렉터리:로그인 쉘```  
비밀번호는 보안상 x로 표시(/etc/shadow 파일에 암호화 되어 관리)


파일의 구분  
<pre>
-           : 일반(보통) 파일  
b           : 블록 디바이스 파일  
c           : 문자열 디바이스 파일  
d           : 디렉토리  
l            : 심볼릭 링크    
p 또는 = : 명명된 파이프(named pipe) / FIFO  
s           : 소켓(socket) 
</pre>

파일 권한  
<pre>
r : 읽기권한, w : 쓰기 권한, x : 실행 권한  
-rwxrwxrwx  
: -(파일타입) rwx(user권한) rwx(group 권한) rwx(other 권한)
</pre>
